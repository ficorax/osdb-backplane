
			    PHP SUPPORT UNDER DEBIAN

    Getting Backplane's PHP support working properly under linux requires
    a bit more effort then it does under FreeBSD.  Under Debian you can
    apt-get the 'php4' module, but the Backplane system needs the header
    files and link libraries and it is also convenient to have the php
    script binary for testing purposes, and I couldn't find an apt-get
    package that deals with any of this.

    So, to begin with, pull down the latest php4 release from PHP's main
    site:

	http://www.php.net/
	Click on 'downloads' and then pull down the PHP 4 source archive.
	Unpack the archive, cd into it, and build and install it:

	    ./configure
	    make
	    make install

    On Debian it may also be convenient to install the php4 package via
    apt-get.  This will pull down the apache support.

	apt-get install php4

    Then cd back into the backplane source distribution's php4 directory
    (that would be the directory containing this README file) and build
    and install the php support.  Note that this support relies on php4
    having already been installed and is not built automatically.

	dxmake
	dxmake install

    If you are root the php_backplane.lo module will be installed in
    /usr/local/backplane/lib and in /usr/local/lib/php/extensions.
    If you are not root php_backplane.lo will only be installed in
    ~/backplane/lib.

    You need to tell php where to find the backplane module.  As intalled
    php looks for a php.ini file in several places, including the current
    directory and as /usr/local/lib/php.ini.  If you do not have a
    /usr/local/lib/php.ini file you should copy the php.ini-recommended
    file from the php source distribution into /usr/local/lib/php.ini and
    then modify it by adding the backplane extension:

	extension_dir=/usr/local/backplane/lib
	extension=php_backplane.lo


			    TESTING THE PHP SUPPORT

    To test the support first make sure your RDBMS_DIR environment variable
    is pointing at the the 'drdbms' subdirectory relative to the backplane
    install directory.  For example, if you installed backplane as a user
    rather then as root it would be something like (for [t]csh):

	setenv RDBMS_DIR $HOME/backplane/drdbms

    or (for /bin/sh):

	RDBMS_DIR=$HOME/backplane/drdbms
	export RDBMS_DIR

    In the main source directory type 'dxmake test' to initialize a test
    database and start the backplane system.  Make sure the test database
    is operational by running 'ddump' on it to see if ddump can connect and
    dump the database:

	cd ..
	dxmake test
	~/backplane/bin/ddump test

    Then CD back into this directory and try running the test.php script:

	cd php4
	./test.php

				PHP FROM APACHE

    Edit your /etc/apache/httpd.conf file.  In the LoadModule section
    make sure that the php4 module has been specified:

	LoadModule php4_module /usr/lib/apache/1.3/libphp4.so

    Make sure index.php is available in the DirectoryIndex directive to
    support index.php indexes, for example:

	DirectoryIndex index.php index.html index.htm index.shtml index.cgi

    Be sure that the MIME types (in httpd.conf) are not commented out:

	AddType application/x-httpd-php .php
	AddType application/x-httpd-php-source .phps
 
    Then restart apache with apachectl (typcally 'apachectl stop' and then
    'apachectl start').

    In order for your apache-based php scripts to properly connect to the
    backplane database you must either (1) set the RDBMS_DIR environment
    variable prior to starting apache or (2) supply the rendezvous directory
    as a second argument to the bkpl_connect() call in your PHP scripts.
    For example:

	$id = bkpl_connect("test", "/usr/local/backplane/drdbms");

    The backplane database uses UNIX DOMAIN sockets.  In order to connect
    to the backplane database running on a remote machine you must configure
    the backplane database's replicator on your local machine to talk to the
    remote machine or otherwise tie into the mesh.  See 'man replicator' and
    'man backplane' for more information.  Note that you do NOT need to
    create a SNAPshot on your local machine, you need only run a replicator
    that ties into the backplane mesh topology that you construct between
    your machines.  However, running a SNAPshot of the database on your
    local machine may greatly improve script performance.

