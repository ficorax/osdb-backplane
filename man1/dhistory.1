.\" $Backplane: rdbms/man1/dhistory.1,v 1.2 2002/03/19 07:13:16 dillon Exp $
.\"
.Dd March 18, 2002
.Dt DHISTORY 1
.Os
.Sh NAME
.Nm dhistory
.Nd dump history of database as SQL
.Sh SYNOPSIS
.Nm
.Op @timestamp
.Op Fl Ansdq
.Op Fl T Ar tsfile
.Op Fl D Ar dbdir
.Op Fl q
.Op Fl GMT
.Ar database[:schema.table]
.Sh DESCRIPTION
.Pp
.Nm
generates SQL statements to the standard output representing the
available history of the specified database or table.  By default,
the entire history of the database up to the most recent synchronization
point will be dumped.
.Nm
works in a manner similar to
.Nm ddump ,
but its output cannot be fed into a high-level (replicator-controlled)
database because timestamp information will be lost.  All database
operations can be broken down into two low level operations:
INSERT and DELETE.  At the lowest level, an UPDATE is a DELETE followed
by an INSERT.  Note that the generated history reflects low-level
operations made to the physical database, not the original SQL commands
used to generate the changes.
.Pp
Each record is preceeded by a comment showing the timestamp when the
change was made and the low-level opcode (INSERT, DELETE, UPDATE).  Note
that the UPDATE opcode is really an INSERT and will always be preceeded
by a DELETE record.  The ascii timestamp is approximate for readability's
sake.
.Pp
.Nm
includes three additional columns for each record.
.Bl -tag -width indent
.It __timestamp
This is a 64 bit timestamp printed in hex.  This is the actual database
timestamp associated with the record.  The 64 bit timestamp doubles as
a unique transaction identifier.  All records with the same timestamp are 
part of the same (outer) transaction.  Note that the transaction identifier
is unique across the entire replication group.
.It __opcode
This is the 8 bit opcode printed in hex.  This is the actual opcode
associated with the record.
.It __userid
This is the 32 bit userid printed in hex.  The userid may be set for
a transaction as a means of implementing a complete audit trail of
changes made to the database.  Since this is a historical database
it is possible to obtain audit information for past changes as well as
for current state.
.El
.Nm
uses streaming queries and can dump databases of any size without
incuring any significant memory overhead. 
.Pp
The following options are available:
.Bl -tag -width indent
.It @timestamp
Dump a snapshot of the database as it appeared at particular date and
time.  If not specified the most recent synchronization point is used.
Timestamps may be in one of three formats:
.Pp
.Bl -tag -width indent
.It 0xHEX
A 64 bit 'raw' database timestamp value.  Database timestamps are
essentially in UNIX time_t format scaled by microseconds.
.It yyyy.mm.dd.hh.mm.ss.frac[G]
For example, 2002.03.22.12.00.00.0G.  All fields are optional.  A 'G'
suffix indicates that you are specifying the time in GMT units, otherwise
the time is specified using your local time zone.
.It ddmmmyyyy/hh:mm:ss.frac[G]
For example, 23May2002.  The day and month is required, the year is optional,
and the elements in the daytime are optional.  A 'G' suffix indicates
that you are specifying the time in GMT units, otherwise the time
is specified using your local time zone.
.El
.It Fl A
Do NOT include system tables in the dump.  Normally
.Nm
includes system tables since the output is designed to be loaded, change
history and timestamps intact, into an offline database (the command for
which I haven't written yet).  Online databases accessed through the
replicator have no ability to modify the database history.
.It Fl n
Do not generate BEGIN/COMMIT sequences in the dump.  Normally
.Nm
generates BEGIN and COMMIT statements after each table create
and for each block of 100 inserts to facilitate loading into a new
database.
.It Fl s
Only dump the schema.  Do not dump table contents.  Normally
.Nm
dumps both the schema (e.g. as in CREATE TABLE ...) and the
INSERTs representing the contents of the tables.  XXX this
will probably change.  At the moment 
.Nm
is similar to
.Nm ddump
but since it will be used for a low-level database load we will
probably change the default to comment-out all meta-SQL commands
like CREATE TABLE and to generate the schema by default.
.It Fl d
Gegnerate a DROP TABLE statement prior to CREATE TABLE.  This
option facilitates testing by allowing you to reload an existing
database from scratch without having to destroy and recreate it.
.It Fl q
Tell
.Nm
to be less verbose on stderr.
.It Fl T Ar tsfile
Enforce transactional coherency between separate executions of
.Nm
and other programs supporting this option.  By default
.Nm
chooses the latest synchronization point but synchronization lags
behind the COMMIT so running SQL queries in separate invocations
of program binaries from a script do not necessarily guarentee
that each invocation will be transactionally coherent with the
prior invocation. 
.Ar tsfile
holds the timestamp representing the most recent commit.  If the
file exists,
.Nm
will use this timestamp as the freeze point for the transaction,
forcing it to be coherent.  The timestamp in the file will be updated
to the latest commit timestamp when the program exits.  If the file does 
not exist the latest synchronization point is used and the file is
created on exit.
.It Fl D Ar dbdir
If specified,
.Ar dbdir
is used as the RDBMS directory instead of the contents of the
RDBMS_DIR environment variable.  This directory must be the
base directory used by the replicator running on the current host
and serves as a rendezvous point so the program can access the
database.
.It Fl GMT
Generating an ascii representation of timestamps in GMT.  If not
specified timestamps are output using your local time zone.
.It Ar database[:schema.table]
Specify the database to dump.  You may also optionally specify a
specific table to dump.
.El
.Pp
.Sh EXAMPLES
.Sh ENVIRONMENT
.Sh SEE ALSO
.Xr ddump 1
.Sh HISTORY
The
.Nm
command first appeared in version 1.0
